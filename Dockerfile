FROM node:18-alpine AS base

# Step 2. Rebuild the source code only when needed
FROM base AS builder

# Step 3. Set working directory to `/app`
WORKDIR /app

# Step 4. Copy over the `package.json` and any lock files for a users' preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# Step 5. Install dependencies based on the preferred package manager
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
  # Allow install without lockfile, so example works even without Node.js installed locally
  else echo "Warning: Lockfile not found. It is recommended to commit lockfiles to version control." && yarn install; \
  fi

# Step 6. Copy all the files from the local repo into the Docker container
COPY . .

# Step 7. Optional, disables Nextjs telemetry
ENV NEXT_TELEMETRY_DISABLED 1

# Step 8. Build Next.js based on the preferred package manager
RUN \
  if [ -f yarn.lock ]; then yarn build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then pnpm build; \
  else yarn build; \
  fi
# End of Chunk 1

# Chunk 2
# Step 1. Get the production image we just built in the Chunk 1
FROM base AS runner

# Step 2. Set the working directory to `/app`
WORKDIR /app

# Step 3. We don't want to run production as the `root` user
# so we create a `nextjs` user and add it to the `nodejs` group.
# This is recommended to prevent unauthorized use if your app is compromised
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Step 4. We change from `root` to `nextjs` user
USER nextjs

# Step 5. Copy all the necessary files generated by Next.js
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Step 6. Optional, disable nextjs telemetry
ENV NEXT_TELEMETRY_DISABLED 1

# Step 7. Optional but recommended to set the production environment
# PORT and HOSTNAME environment variables
ENV PORT 3001
ENV HOSTNAME localhost

# Step 8. We run the `server.js` that is generated from `./next/standalone/server.js`
CMD ["node", "server.js"]